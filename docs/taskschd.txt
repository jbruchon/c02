                            C02 Operating System
                            Task Scheduler Usage

This file provides information on how to use the C02 kernel scheduler to
execute tasks.

CONTEXT FORMAT
--------------

A context for a task currently consists of the processor state only.  In
the future there may be a zero-page area included in the context data.  Each
context consists of seven bytes and the kernel can be easily modified to
store them in a non-ZP location if desired.  The contexts are addressed
using an offset generated by the task number for the context and a hard-coded
context base address in the kernel.  Unmodified configuration of contexts
starts at the specified "ctxstart" in BUILD.CFG.  The context offsets are as
follows:

$00 Program Counter (Low byte)
$01 Program Counter (High byte)
$02 Accumulator
$03 X register
$04 Y register
$05 Processor Status Byte
$06 Stack Pointer

An initial context for a new task must be as follows:

$00/$01 = PC where new task starts
$02-$04 = Initial A/X/Y (Should not matter)
$05     = $20 (All flags except 65816 emulation mode OFF)
$06     = Stack pointer for new task

It is up to the loading program to decide an appropriate value for the stack
pointer.  All tasks must have enough space on the stack for an IRQ to not
write over another task's stack space.  The safest way to do this is to make
the new task SP align to a 16-byte boundary (i.e. INIT = $FF, task1 = $EF,
etc.)  This provides 10 bytes for the program to use as stack and the
remaining 6 bytes reserved for IRQs.

